#!/bin/bash
#
# PE Node automated installation script
# This is automatically generated from a template
# so a lot of evaulation logic is in the awsdemo/templates/pe_node.erb file

PE_BUILD='<%= @pe_build %>'
PE_DOWNLOAD_URL='https://s3.amazonaws.com/pe-builds/released/'
PE_DNS_ALTNAMES='<%= @pe_dns_altnames %>'
PE_PASSWORD='<%= @pe_admin_password %>'
PE_ROLE='<%= @pe_role %>'
AWS_MD_URL='http://169.254.169.254/latest/meta-data/'
PRIVATE_HOSTNAME=$(curl -fs $AWS_MD_URL/hostname)
PUBLIC_HOSTNAME=$(curl -fs $AWS_MD_URL/public-hostname)
INSTANCE_ID=$(curl -fs $AWS_MD_URL/instance-id)


function install_search {

  yum install -y ruby ntpdate && gem install aws-sdk-core

  cat > /opt/awsdemo/pe_search.rb << PE_SEARCH
#!/usr/bin/env ruby
# installed by userdata
# call via:
# /opt/awsdemo/pe_search.rb $pe_role $pe_build $region

require 'aws-sdk-core'

role = ARGV[0]
build = ARGV[1]
region = ARGV[2]

ec2 = Aws::EC2::Client.new( region: region )

servers = ec2.describe_instances({
  filters: [
    {
      name: "tag:pe_role",
      values: [role],
    },
    {
      name: "tag:pe_build",
      values: [build],
    },
  ],
})

servers.reservations.each do |instance|
  puts instance.instances[0].private_dns_name
end
PE_SEARCH

 chmod +x /opt/awsdemo/pe_search.rb

}

function write_answers () {
  case $PE_ROLE in
    'aio' ) write_aio_answers;
    'master' ) write_master_answers;
    'puppetdb' ) write_puppetdb_answers;
    'console' ) write_console_answers;
  esac;
}

# all in one
function write_aio_answers() {
  cat > /opt/awsdemo/answers.txt << ANSWERS
q_all_in_one_install=y
q_backup_and_purge_old_configuration=n
q_backup_and_purge_old_database_directory=n
q_database_host=localhost
q_database_install=y
q_install=y
q_pe_database=y
q_puppet_cloud_install=y
q_puppet_enterpriseconsole_auth_password=$PE_ADMIN_PASSWORD
q_puppet_enterpriseconsole_httpd_port=443
q_puppet_enterpriseconsole_install=y
q_puppet_enterpriseconsole_master_hostname=$PRIVATE_HOSTNAME
q_puppet_enterpriseconsole_smtp_host=localhost
q_puppet_enterpriseconsole_smtp_password=
q_puppet_enterpriseconsole_smtp_port=25
q_puppet_enterpriseconsole_smtp_use_tls=n
q_puppet_enterpriseconsole_smtp_user_auth=n
q_puppet_enterpriseconsole_smtp_username=
q_puppet_symlinks_install=y
q_puppetagent_certname=$PRIVATE_HOSTNAME
q_puppetagent_install=y
q_puppetagent_server=$PRIVATE_HOSTNAME
q_puppetdb_hostname=$PRIVATE_HOSTNAME
q_puppetdb_install=y
q_puppetdb_port=8081
q_puppetmaster_certname=m$PRIVATE_HOSTNAME
q_puppetmaster_dnsaltnames=$INSTANCE_ID,$PRIVATE_HOSTNAME,$PUBLIC_HOSTNAME,puppet,$PE_DNS_ALTNAMES
q_puppetmaster_enterpriseconsole_hostname=localhost
q_puppetmaster_enterpriseconsole_port=443
q_puppetmaster_install=y
q_run_updtvpkg=n
q_vendor_packages_install=y
q_enable_future_parser=n
q_skip_backup=y
ANSWERS
}

# master role
function write_masteranswers () {
  cat > /opt/awsdemo/answers.txt << ANSWERS
q_all_in_one_install=n
q_database_install=n
q_install=y
q_pe_database=n
q_puppet_cloud_install=y
q_puppet_enterpriseconsole_install=n
q_puppet_symlinks_install=y
q_puppetagent_certname=master-$INSTANCE_ID
q_puppetagent_install=y
q_puppetagent_server=$PRIVATE_HOSTNAME
q_puppetdb_hostname=$PUPPETDB_HOSTNAME
q_puppetdb_install=n
q_puppetdb_port=8081
q_puppetmaster_certname=master-$INSTANCE_ID
q_puppetmaster_dnsaltnames=$INSTANCE_ID,$PRIVATE_HOSTNAME,puppet,$PE_DNS_ALTNAMES
q_puppetmaster_enterpriseconsole_hostname=$CONSOLE_HOSTNAME
q_puppetmaster_enterpriseconsole_port=443
q_puppetmaster_install=y
q_run_updtvpkg=n
q_vendor_packages_install=y
q_enable_future_parser=n
q_skip_backup=y
ANSWERS
}
# console role
function write_consoleanswers () {
  cat > /opt/awsdemo/answers.txt << ANSWERS
q_all_in_one_install=n
q_database_host=$PUPPETDB_HOSTNAME
q_database_install=n
q_database_port=5432
q_fail_on_unsuccessful_master_lookup=n
q_install=y
q_pe_database=n
q_puppet_cloud_install=n
q_puppet_enterpriseconsole_auth_database_name=console_auth
q_puppet_enterpriseconsole_auth_database_password=fUWgOb8IIeMUAL1o5a1d
q_puppet_enterpriseconsole_auth_database_user=console_auth
q_puppet_enterpriseconsole_auth_password=$PE_PASSWORD
q_puppet_enterpriseconsole_database_name=console
q_puppet_enterpriseconsole_database_password=MCScXQsCPvl48D5gYDsg
q_puppet_enterpriseconsole_database_user=console
q_puppet_enterpriseconsole_httpd_port=443
q_puppet_enterpriseconsole_install=y
q_puppet_enterpriseconsole_master_hostname=$MASTER_HOSTNAME
q_puppet_enterpriseconsole_smtp_host=localhost
q_puppet_enterpriseconsole_smtp_password=
q_puppet_enterpriseconsole_smtp_port=25
q_puppet_enterpriseconsole_smtp_use_tls=n
q_puppet_enterpriseconsole_smtp_user_auth=n
q_puppet_enterpriseconsole_smtp_username=
q_puppet_symlinks_install=y
q_puppetagent_certname=ubuntu1204b
q_puppetagent_install=y
q_puppetagent_server=ubuntu1204a
q_puppetca_install=n
q_puppetdb_database_name=pe-puppetdb
q_puppetdb_database_password=XN6YPvyzAMUZpe86RoTH
q_puppetdb_database_user=pe-puppetdb
q_puppetdb_hostname=master
q_puppetdb_install=n
q_puppetdb_port=8081
q_puppetmaster_enterpriseconsole_hostname=localhost
q_puppetmaster_install=n
q_run_updtvpkg=n
q_vendor_packages_install=y
ANSWERS
}

function write_csr_attributes () {
  if [ ! -d /etc/puppetlabs/puppet ]; then
    mkdir -p /etc/puppetlabs/puppet
  fi

  cat > /etc/puppetlabs/puppet/csr_attributes.yaml << YAML
---
extension_requests:
  pp_instance_id: $INSTANCE_ID
<%- if @pp_uuid -%>
  pp_uuid: '<%= @pp_uuid %>'
<%- end -%>
<%- if @pp_preshared_key -%>
  pp_preshared_key: '<%= @pp_preshared_key %>'
<%- end -%>
<%- if @pp_cost_center -%>
  1.3.6.1.4.1.34380.1.1.5: '<%= @pp_cost_center %>'
<%- end -%>
<%- if @pp_product -%>
  1.3.6.1.4.1.34380.1.1.6: '<%= @pp_product %>'
<%- end -%>
<%- if @pp_project -%>
  1.3.6.1.4.1.34380.1.1.7: '<%= @pp_project %>'
<%- end -%>
<%- if @pp_application -%>
  1.3.6.1.4.1.34380.1.1.8: '<%= @pp_application %>'
<%- end -%>
<%- if @pp_service -%>
  1.3.6.1.4.1.34380.1.1.9: '<%= @pp_service %>'
<%- end -%>
<%- if @pp_employee -%>
  1.3.6.1.4.1.34380.1.1.10: '<%= @pp_employee %>'
<%- end -%>
<%- if @pp_created_by -%>
  1.3.6.1.4.1.34380.1.1.11: '<%= @pp_created_by %>'
<%- end -%>
<%- if @pp_environment -%>
  1.3.6.1.4.1.34380.1.1.12: '<%= @pp_environment %>'
<%- end -%>
<%- if @pp_role -%>
  1.3.6.1.4.1.34380.1.1.13: '<%= @pp_role %>'
<%- end -%>
<%- if @pp_software_version -%>
  1.3.6.1.4.1.34380.1.1.14: '<%= @pp_software_version %>'
<%- end -%>
<%- if @pp_department -%>
  1.3.6.1.4.1.34380.1.1.15: '<%= @pp_department %>'
<%- end -%>
<%- if @pp_cluster -%>
  1.3.6.1.4.1.34380.1.1.16: '<%= @pp_cluster %>'
<%- end -%>
<%- if @pp_provisioner -%>
  1.3.6.1.4.1.34380.1.1.17: '<%= @pp_provisioner %>'
<%- end -%>
YAML
}

function create_opt {
  /sbin/parted -s /dev/xvdb mklabel gpt
  /sbin/parted -s /dev/xvdb mkpart primary 0% 100%
  /sbin/mkfs.ext4 /dev/xvdb1
  mount /dev/xvdb1 /opt
  echo "/dev/xvdb1              /opt                    ext4    defaults        0 2" >> /etc/fstab
  lsblk
}

function configure_redhat() {

  echo "Disabling SELinux, setting time"
  setenforce 0

  #living on the edge
  sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config

  yum instally -y ntpdate

  ntpdate -u 0.amazon.pool.ntp.org

}

function install_pe() {
  echo "Installing Puppet Enterprise ${PE_BUILD}"
  if [ ! -d /opt/awsdemo/pe ]; then
    mkdir -p /opt/awsdemo/pe
  fi
  if [ ! -f /opt/awsdemo/pe/puppet-enterprise-installer ]; then
    curl -L -o /opt/awsdemo/pe-installer.tar.gz "https://pm.puppetlabs.com/cgi-bin/download.cgi?ver=$PE_BUILD&dist=el&arch=x86_64&rel=7"
    tar --extract --file=/opt/awsdemo/pe-installer.tar.gz --strip-components=1 --directory=/opt/awsdemo/pe/
  fi

  write_answers

  /opt/awsdemo/pe/puppet-enterprise-installer -a /opt/awsdemo/answers.txt

  # nuke autosign for right now, we might fix this with a module later for certsigner
  echo "*" > /etc/puppetlabs/puppet/autosign.conf
  service pe-puppetserver restart
}

function provision_puppet() {

  configure_redhat

  create_opt

  install_pe

}

provision_puppet
